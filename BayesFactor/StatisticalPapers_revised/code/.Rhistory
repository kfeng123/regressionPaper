y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
prod(up.nst > 0) * prod(low.nst < 0)
if 0 print("haha")
if (0) print("haha")
if (1) print("haha")
s
# test
if(prod(up.nst > 0) * prod(low.nst < 0)){
# accept
lassoTest_one_result <- 0
}
else{
# reject
lassoTest_one_result <- 1
}
if(1){
print("haha")
}
else{
print("whahwa")
}
if(1){
print("haha")
}else{
print("whahwa")
}
if(0){
print("haha")
}else{
print("whahwa")
}
lassoTest <- rep(0,100)
for(i in 1:100){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
mean(lassoTest)
lassoTest <- rep(0,1000)
for(i in 1:1000){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
mean(lassoTest)
setwd("~/regressionPaper/BayesFactor/StatisticalPapers_revised/code")
?sample
sample(10,9)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
install.packages("hdi")
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
library(scalreg)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
stat.boot.st
rep(NA,2)
xianyang.i
Theta
e
xi.boot
Teta[sset]
Theta[set,]
Theta[set,]%*%(X)
dim(Theta)
Theta[set,]%*%t(X)
e
Theta[set,]%*%t(X)%*%e
sigma.sq
sum((y-X%*%beta.hat)^2)
n
sum(abs(beta.hat)>0)
sreg
?scalreg
sreg.coefficients
sreg$coefficients
sigma.sq <- sum((y-X%*%beta.hat)^2)/(n-sum(abs(beta.hat)>1e-9))
sigma.sq
abs(beta.hat)>1e-9
sum(abs(beta.hat)>1e-9)
sreg$hsigma
y
X
betabGen
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
p
p/20*19
SNR
sreg
beta.hat
sreg$coefficients
str(sreg)
sreg$hsigma
scalreg
est <- slassoEst(X, y, lam0)
est <- slassoEst(X, y)
?slassoEst
est
slassoEst
nX = dim(X)[1]
pX = dim(X)[2]
if (is.null(lam0)) {
if (pX > 10^6) {
lam0 = "univ"
}
else lam0 = "quantile"
}
if (lam0 == "univ" | lam0 == "universal")
lam0 = sqrt(2 * log(pX)/nX)
lam0 = "quantile"
if (lam0 == "univ" | lam0 == "universal")
lam0 = sqrt(2 * log(pX)/nX)
if (lam0 == "quantile") {
L = 0.1
Lold = 0
while (abs(L - Lold) > 0.001) {
k = (L^4 + 2 * L^2)
Lold = L
L = -qnorm(min(k/pX, 0.99))
L = (L + Lold)/2
}
if (pX == 1)
L = 0.5
lam0 = sqrt(2/nX) * L
}
lam0
objlasso = lars(X, y, type = "lasso", intercept = FALSE,
normalize = FALSE, use.Gram = FALSE)
objlasso
sigmaint = 0.1
sigmanew = 5
flag = 0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
lam
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
lam * nX
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
lam * nX
sigmaint = 0.1
sigmanew = 5
flag = 0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
lam
plot(objlasso)
?lars
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
hbeta = predict.lars(objlasso, X, s = lam * nX, type = "coefficients",
mode = "lambda")$coef
hbeta
sum(hbeta>0)
sigmanew
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
hy = predict.lars(objlasso, X, s = 100, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
sd(y)
var(y)
sigmaint = 0.1
sigmanew = 5
flag = 0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
hbeta = predict.lars(objlasso, X, s = lam * nX, type = "coefficients",
mode = "lambda")$coef
hbeta
sum(hbeta!=0)
lam
lam0 = sqrt(2/nX) * L
lam0
objlasso = lars(X, y, type = "lasso", intercept = FALSE,
normalize = FALSE, use.Gram = FALSE)
sigmaint = 0.1
sigmanew = 5
flag = 0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
lam0
lam
hbeta = predict.lars(objlasso, X, s = lam * nX, type = "coefficients",
mode = "lambda")$coef
sum(hbeta!=0)
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
sqrt(2 * log(pX)/nX)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
sreg <- scalreg(X, y)
sreg$hsigma
nX = dim(X)[1]
pX = dim(X)[2]
lam0 = "quantile"
RepTime
i
L = 0.1
Lold = 0
while (abs(L - Lold) > 0.001) {
k = (L^4 + 2 * L^2)
Lold = L
L = -qnorm(min(k/pX, 0.99))
L = (L + Lold)/2
}
if (pX == 1)
L = 0.5
lam0 = sqrt(2/nX) * L
lam0
objlasso = lars(X, y, type = "lasso", intercept = FALSE,
normalize = FALSE, use.Gram = FALSE)
sigmaint = 0.1
sigmanew = 5
flag = 0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
lam
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
hbeta = predict.lars(objlasso, X, s = lam * nX, type = "coefficients",
mode = "lambda")$coef
sum(hbeta!=0)
mean(y^2)
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
install.packages("SILM")
library(SILM)
library(help="SILM")
?Sim.CI
Sim.CI(X,y)
n <- 100
p <- 10
s0 <- 3
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
n <- 100
p <- 1000
s0 <- 3
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
dim(X)
dim(y)
sigma.sq
beta.db
# X
# y
# set
LT.M <- 500
here_alpha <- 0.95
set <- 1:q
sreg <- scalreg(X, y)
dim(X)
dim(y)
scalreg
slassoEst(X, y, lam0)
slassoEst(X, y)
slassoEst
sreg <- scalreg(X, y)
nX = dim(X)[1]
pX = dim(X)[2]
if (is.null(lam0)) {
if (pX > 10^6) {
lam0 = "univ"
}
else lam0 = "quantile"
}
lam0=NULL
if (is.null(lam0)) {
if (pX > 10^6) {
lam0 = "univ"
}
else lam0 = "quantile"
}
if (lam0 == "univ" | lam0 == "universal")
lam0 = sqrt(2 * log(pX)/nX)
if (lam0 == "quantile") {
L = 0.1
Lold = 0
while (abs(L - Lold) > 0.001) {
k = (L^4 + 2 * L^2)
Lold = L
L = -qnorm(min(k/pX, 0.99))
L = (L + Lold)/2
}
if (pX == 1)
L = 0.5
lam0 = sqrt(2/nX) * L
}
objlasso = lars(X, y, type = "lasso", intercept = FALSE,
normalize = FALSE, use.Gram = FALSE)
objlasso
lars(X, y)
lars
dim(X)
dim(y)
y=Y
# X
# y
# set
LT.M <- 500
here_alpha <- 0.95
set <- 1:q
sreg <- scalreg(X, y)
beta.hat <- sreg$coefficients
sigma.sq <- sum((y-X%*%beta.hat)^2)/(n-sum(abs(beta.hat)>1e-9))
beta.hat
sigma.sq
nX = dim(X)[1]
pX = dim(X)[2]
lam0 = "quantile"
if (lam0 == "univ" | lam0 == "universal")
lam0 = sqrt(2 * log(pX)/nX)
if (lam0 == "quantile") {
L = 0.1
Lold = 0
while (abs(L - Lold) > 0.001) {
k = (L^4 + 2 * L^2)
Lold = L
L = -qnorm(min(k/pX, 0.99))
L = (L + Lold)/2
}
if (pX == 1)
L = 0.5
lam0 = sqrt(2/nX) * L
}
objlasso = lars(X, y, type = "lasso", intercept = FALSE,
normalize = FALSE, use.Gram = FALSE)
sigmaint = 0.1
sigmanew = 5
flag = 0
lam0
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
flag = flag + 1
sigmaint = sigmanew
lam = lam0 * sigmaint
hy = predict.lars(objlasso, X, s = lam * nX, type = "fit",
mode = "lambda")$fit
sigmanew = sqrt(mean((y - hy)^2))
sigmanew
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
lassoTest_on
If(FALSE)print("haha")
If(FALSE==FALSE)print("haha")
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
install.packages("ggplot2")
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
library(ggplot2)
theD <- read.csv(paste0("results/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv"))
names(theD) <- c("SNR", "NEW", "GT", "EP")
myData <- NULL
names(theD)
theD
theD <- theD[-ncol(theD)]
theD
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
Xb <- rnorm(n*p)
dim(Xb) <- c(n,p)
Xb <- apply(Xb, 2, function(x){x/sqrt(sum(x^2))})
Xb
sum(Xb[,1]^2)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
warnings()
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/plot_enter_tmp.R', echo=TRUE)
for(XGen in c("col_norm"))
for(n in c(50))
for(epsilonDis in c("t"))
for(betabGen in c("dense")){
source("./plot.R")
}
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
for(XGen in c("col_norm"))
for(n in c(100))
for(epsilonDis in c("t"))
for(betabGen in c("dense"))
source("./code.R")
for(XGen in c("col_norm"))
for(n in c(100))
for(epsilonDis in c("t"))
for(betabGen in c("dense")){
source("./plot.R")
}
tmpMatrix <- rep(0.1,n*n)
diag(tmpMatrix) <- 1
dim(ttmpMatrix) <- c(n,n)
diag(tmpMatrix) <- 1
tmpMatrix <- rep(0.1,n*n)
dim(tmpMatrix) <- c(n,n)
diag(tmpMatrix) <- 1
tmpMatrix
?chol
chol
tmpChol <- Matrix::chol(tmpMatrix)
t(tmpChol)* tmpChol
t(tmpChol)%*% tmpChol
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
warnings()
for(XGen in c("rowCor"))
for(n in c(50))
for(epsilonDis in c("t"))
for(betabGen in c("dense")){
source("./plot.R")
}
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
Q
Q
Q
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/StatisticalPapers_revised/code/enter_tmp.R', echo=TRUE)
