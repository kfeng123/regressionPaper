lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[0] <- 1
for(i in 1:SL.iterTime){
if(i==1) continue
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
}
for(i in 1:SL.iterTime){
if(i==1) continue()
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
}
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[0] <- 1
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
}
SL.lambda_array
SL.lambda_array[1] <- 1
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
}
SL.lambda_array
SL.sigma_est
library(glmnet)
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
y <- rnorm(n,0,2)
lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 1
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.sigma_array
SL.lambda_array
sample(p,p-50)
?sample
beta <- rep(1,p)
beta[sample(p,p-50, replace = TRUE)] <- 0
beta
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
beta[sample(p,p-50, replace = TRUE)] <- 0
y <- rnorm(n,0,2) + X %*%
lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 1
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.sigma_array
SL.lambda_array
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
beta[sample(p,p-50, replace = TRUE)] <- 0
y <- rnorm(n,0,2) + X %*% beta
lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 1
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.lambda_array
SL.sigma_array
library(glmnet)
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2) + X %*% beta
lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 1
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
install.packages("scalreg")
library(scalreg)
library(help="scalreg")
?scalreg
scalreg()
scalreg
?lse
haha <- scalreg(X,y)
haha
print(haha)
haha$hsigma
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2) + X %*% beta
haha$hsigma
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2)
?rnorm
haha <- scalreg(X,y)
haha$hsigma
n <- 100
p <- 10
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2)  + X%*% beta
haha <- scalreg(X,y)
haha
haha
lasso_model <- glmnet(X, y,
family="gaussian",
alpha=1,
nlambda = 1000,
standardize= FALSE,
intercept=FALSE)
theCoef <- coef(lasso_model, s = 0.1)
thePred <- predict(lasso_model, X, s=0.1)
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 1
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.sigma_array
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 0.001
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.lambda_array
SL.sigma_array
############ Scaled LASSO ########################
SL.iterTime <- 1000
SL.lambda_array <- rep(0, SL.iterTime)
SL.lambda_array[1] <- 0.00001
SL.sigma_array <- rep(0, SL.iterTime)
for(i in 2:SL.iterTime){
SL.sigma_est <- sqrt( mean( (y - predict(lasso_model, X, s= SL.lambda_array[i-1]) )^2 ) )
SL.lambda_array[i] <- SL.lambda_array[i-1] * SL.sigma_est
SL.sigma_array[i] <- SL.sigma_est
}
SL.lambda_array
SL.sigma_array
haha <- scalreg(X,y)
haha
library(glmnet)
library(scalreg)
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2)  + X%*% beta
haha <- scalreg(X,y)
haha$hsigma
library(glmnet)
library(scalreg)
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2)
haha <- scalreg(X,y)
haha$hsigma
install.packages("SILM")
log(p)/n
log(p)/n*10
############ Code provided by Xianyang Zhang
library(SILM)
?Sim.CI
n <- 100
p <- 10
s0 <- 3
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
n <- 100
p <- 10
s0 <- 3
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
?chol
Sim.CI
n <- 100
p <- 1000
s0 <- 10
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
library(SILM)
n <- 100
p <- 200
s0 <- 10
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
n <- 100
p <- 300
s0 <- 10
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
n <- 50
p <- 300
s0 <- 10
set <- 1:s0
Sigma <- matrix(NA, p, p)
for (i in 1:p) Sigma[i,] <- 0.9^(abs(i-(1:p)))
X <- matrix(rnorm(n*p), n, p)
X <- t(t(chol(Sigma))%*%t(X))
beta <- rep(0,p)
#beta[1:s0] <- runif(s0,0,2)
Y <- X%*%beta+rt(n,4)/sqrt(2)
Sim.CI(X, Y, set)
?getFromNamespace
score.nodewiselasso = getFromNamespace("score.nodewiselasso", "hdi")
score.nodewiselasso
############ Code provided by Xianyang Zhang
Gram <- t(X)%*%X/n
score.nodewiselasso <- getFromNamespace("score.nodewiselasso", "hdi")
############ Code provided by Xianyang Zhang
Gram <- t(X)%*%X/n
score.nodewiselasso <- getFromNamespace("score.nodewiselasso", "hdi")
############ Code provided by Xianyang Zhang
Gram <- t(X)%*%X/n
score.nodewiselasso <- getFromNamespace("score.nodewiselasso", "hdi")
node <- score.nodewiselasso(X, wantTheta=TRUE, verbose=FALSE, lambdaseq="quantile",
parallel=FALSE, ncores=2, oldschool = FALSE, lambdatuningfactor = 1)
Theta <- node$out
sreg <- scalreg(X, Y)
beta.hat <- sreg$coefficients
sigma.sq <- sum((Y-X%*%beta.hat)^2)/(n-sum(abs(beta.hat)>0))
beta.db <- beta.hat+Theta%*%t(X)%*%(Y-X%*%beta.hat)/n
Omega <- diag(Theta%*%Gram%*%t(Theta))*sigma.sq
stat.boot.st <- stat.boot.nst <- rep(NA,M)
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
M=500
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
stat.boot.st <- stat.boot.nst <- rep(NA,M)
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
crit.nst <- quantile(stat.boot.nst, alpha)
crit.st <- quantile(stat.boot.st, alpha)
up.nst <- beta.db[set] + crit.nst/sqrt(n)
low.nst <- beta.db[set] - crit.nst/sqrt(n)
up.st <- beta.db[set] + crit.st*sqrt(Omega[set])/sqrt(n)
low.st <- beta.db[set] - crit.st*sqrt(Omega[set])/sqrt(n)
band.nst <- rbind(low.nst, up.nst)
band.st <- rbind(low.st, up.st)
result <- list(beta.db[set], band.nst, band.st)
names(result) <- c("de-biased Lasso", "band.nst", "band.st")
alpha=0.95
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
crit.nst <- quantile(stat.boot.nst, alpha)
crit.st <- quantile(stat.boot.st, alpha)
up.nst <- beta.db[set] + crit.nst/sqrt(n)
low.nst <- beta.db[set] - crit.nst/sqrt(n)
up.st <- beta.db[set] + crit.st*sqrt(Omega[set])/sqrt(n)
low.st <- beta.db[set] - crit.st*sqrt(Omega[set])/sqrt(n)
band.nst <- rbind(low.nst, up.nst)
band.st <- rbind(low.st, up.st)
result <- list(beta.db[set], band.nst, band.st)
names(result) <- c("de-biased Lasso", "band.nst", "band.st")
n <- 100
p <- 1000
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
y <- rnorm(n,0,2)
Gram <- t(X)%*%X/n
score.nodewiselasso <- getFromNamespace("score.nodewiselasso", "hdi")
node <- score.nodewiselasso(X, wantTheta=TRUE, verbose=FALSE, lambdaseq="quantile",
parallel=FALSE, ncores=2, oldschool = FALSE, lambdatuningfactor = 1)
Theta <- node$out
sreg <- scalreg(X, Y)
beta.hat <- sreg$coefficients
sigma.sq <- sum((Y-X%*%beta.hat)^2)/(n-sum(abs(beta.hat)>0))
beta.db <- beta.hat+Theta%*%t(X)%*%(Y-X%*%beta.hat)/n
Omega <- diag(Theta%*%Gram%*%t(Theta))*sigma.sq
stat.boot.st <- stat.boot.nst <- rep(NA,M)
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
crit.nst <- quantile(stat.boot.nst, alpha)
crit.st <- quantile(stat.boot.st, alpha)
up.nst <- beta.db[set] + crit.nst/sqrt(n)
low.nst <- beta.db[set] - crit.nst/sqrt(n)
up.st <- beta.db[set] + crit.st*sqrt(Omega[set])/sqrt(n)
low.st <- beta.db[set] - crit.st*sqrt(Omega[set])/sqrt(n)
band.nst <- rbind(low.nst, up.nst)
band.st <- rbind(low.st, up.st)
result <- list(beta.db[set], band.nst, band.st)
names(result) <- c("de-biased Lasso", "band.nst", "band.st")
dim(X)
dim(y)
y
t(y)
t(y) %*% x
t(y) %*% X
Y=y
sreg <- scalreg(X, Y)
beta.hat <- sreg$coefficients
sigma.sq <- sum((Y-X%*%beta.hat)^2)/(n-sum(abs(beta.hat)>0))
beta.db <- beta.hat+Theta%*%t(X)%*%(Y-X%*%beta.hat)/n
Omega <- diag(Theta%*%Gram%*%t(Theta))*sigma.sq
stat.boot.st <- stat.boot.nst <- rep(NA,M)
for (i in 1:M) {
e <- rnorm(n)
xi.boot <- Theta[set,]%*%t(X)%*%e*sqrt(sigma.sq)/sqrt(n)
stat.boot.nst[i] <- max(abs(xi.boot))
stat.boot.st[i] <- max(abs(xi.boot)/sqrt(Omega[set]))
}
crit.nst <- quantile(stat.boot.nst, alpha)
crit.st <- quantile(stat.boot.st, alpha)
up.nst <- beta.db[set] + crit.nst/sqrt(n)
low.nst <- beta.db[set] - crit.nst/sqrt(n)
up.st <- beta.db[set] + crit.st*sqrt(Omega[set])/sqrt(n)
low.st <- beta.db[set] - crit.st*sqrt(Omega[set])/sqrt(n)
band.nst <- rbind(low.nst, up.nst)
band.st <- rbind(low.st, up.st)
result <- list(beta.db[set], band.nst, band.st)
names(result) <- c("de-biased Lasso", "band.nst", "band.st")
result
prod(up.nst > 0)
prod(low.nst < 0)
low.nst
n <- 50
p <- 300
X <- rnorm(n*p); dim(X) <- c(n,p)
beta <- rep(1,p)
#beta[sample(p,p-5, replace = TRUE)] <- 0
set <- 1:5
source("./ZhangXianYang/covarianceMatrix.R")
lassoTest <- rep(0,100)
for(i in 1:100){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
?if
lassoTest <- rep(0,100)
for(i in 1:100){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
prod(up.nst > 0) * prod(low.nst < 0)
if 0 print("haha")
if (0) print("haha")
if (1) print("haha")
s
# test
if(prod(up.nst > 0) * prod(low.nst < 0)){
# accept
lassoTest_one_result <- 0
}
else{
# reject
lassoTest_one_result <- 1
}
if(1){
print("haha")
}
else{
print("whahwa")
}
if(1){
print("haha")
}else{
print("whahwa")
}
if(0){
print("haha")
}else{
print("whahwa")
}
lassoTest <- rep(0,100)
for(i in 1:100){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
mean(lassoTest)
lassoTest <- rep(0,1000)
for(i in 1:1000){
y <- rnorm(n,0,2)
source("./ZhangXianYang/lassoTest.R")
lassoTest[i] <- lassoTest_one_result
}
mean(lassoTest)
setwd("~/regressionPaper/BayesFactor/StatisticalPapers_revised/code")
