# EigenPrism: inference for high dimensional signal-to-noise ratios
myZ <- as.numeric( t(myUb) %*% y )
ohT <- sum(myEPWeight * myZ^2 )
epResult[i] <- ( ohT/ ( sqrt(2*myValP1) * sum(y^2)/n ) > qnorm(1-alpha) )
zzz[i] <- ohT/ ( sqrt(2*myValP1) * sum(y^2)/n )
### GT statistics
Y <- y
S <- sum(Y * (XX %*% Y)) / sum((t(tildeUa) %*% Y)^2)
lams <- lam
lams[1:(n-q)] <- lams[1:(n-q)] - S
p.value <- .getP(lams)
gtResult[i] <- (p.value <alpha)
# proposed statistic
theNumerator <- as.numeric(
t(y) %*% myBase %*% y
)
theDenominator <- sum(
(t(tildeUa) %*% y)^2
)
proposedStat <- theNumerator / theDenominator
# estimation of tau square
tildeEpsilon <- tildePa %*% y
tauSquare <-
(
(n-q)^2 * sum(tildeEpsilon^4)/sum(tildeEpsilon^2)^2-
3*sum(diag(tildePa)^2)
)/
(
sum(tildePa^4)
)+
2
if(tauSquare < 0) tauSquare <- 0
tau <- sqrt(tauSquare)
# reference distribution
myRef <- tau * ref1 + ref2
if(mean(myRef > ((n-q)*proposedStat)-sum(diag(myBase))) <alpha){
myResultOld[i] <- 1
}
else{
myResultOld[i] <- 0
}
# myRefStep1 <- tau * (refBase1 - x0 * refPlus1) + refBase2 - x0 * refPlus2
# x1 <- quantile(myRefStep1,1-alpha)/(n-q) + x0
#
# myRefStep2 <- tau * (refBase1 - x1 * refPlus1) + refBase2 - x1 * refPlus2
# x2 <- quantile(myRefStep2,1-alpha)/(n-q) + x0
# if(proposedStat > x2){
#     myResult[i] <- 1
# }
# else{
#     myResult[i] <- 0
# }
#
#
# if(proposedStat > x1){
#     myResultTmp[i] <- 1
# }
# else{
#     myResultTmp[i] <- 0
# }
}
mean(zzz)
var(zzz)
zzz
max(sum(myEPWeight^2),sum(myEPWeight^2 * eigenXbXbT^2))
ohMyTmp$value
sum(myEPWeight^2)
sum(myEPWeight^2 * eigenXbXbT^2)
solve
psolve
sum(myEPWeight)
sum(myEPWeight * eigenXbXbT)
?solve
obj <- max(sum(myVariable^2),sum((myVariable^2) * eigenXbXbT^2))
myConstr <- list(sum(myVariable)==0, sum(eigenXbXbT * myVariable)==1)
myProblem <- Problem(Minimize(obj),myConstr)
ohMyTmp <- solve(myProblem)
myEPWeight <- ohMyTmp$getValue(myVariable)
# sometimes it returns "optimal_inaccurate"
#myValP1 <- ohMyTmp$value
myValP1 <- max(sum(myEPWeight^2),sum(myEPWeight^2 * eigenXbXbT^2))
myVarP1
myValP1
?entry_sum
?entry_max
?max
ohoh <- eigen(Xb%*%t(Xb),symmetric = TRUE)
eigenXbXbT <- ohoh$values
myUb <- ohoh$vectors
myVariable <- Variable(n)
obj <- max(c(sum(myVariable^2),sum((myVariable^2) * eigenXbXbT^2)))
myConstr <- list(sum(myVariable)==0, sum(eigenXbXbT * myVariable)==1)
myProblem <- Problem(Minimize(obj),myConstr)
ohMyTmp <- solve(myProblem)
myEPWeight <- ohMyTmp$getValue(myVariable)
# sometimes it returns "optimal_inaccurate"
#myValP1 <- ohMyTmp$value
myValP1 <- max(sum(myEPWeight^2),sum(myEPWeight^2 * eigenXbXbT^2))
myVarP1
myValP1
max(c(1,2))
ohoh <- eigen(Xb%*%t(Xb),symmetric = TRUE)
eigenXbXbT <- ohoh$values
myUb <- ohoh$vectors
myVariable <- Variable(n)
obj <- max(c(sum((myVariable^2) * eigenXbXbT^2), sum(myVariable^2)))
myConstr <- list(sum(myVariable)==0, sum(eigenXbXbT * myVariable)==1)
myProblem <- Problem(Minimize(obj),myConstr)
ohMyTmp <- solve(myProblem)
myEPWeight <- ohMyTmp$getValue(myVariable)
# sometimes it returns "optimal_inaccurate"
#myValP1 <- ohMyTmp$value
myValP1 <- max(sum(myEPWeight^2),sum(myEPWeight^2 * eigenXbXbT^2))
myValP1
sum(myEPWeight^2)
sum(myEPWeight^2 * eigenXbXbT^2)
obj <- max(sum((myVariable^2) * eigenXbXbT^2), sum(myVariable^2))
obj <- max(sum((myVariable^2) * eigenXbXbT^2))#, sum(myVariable^2))
myConstr <- list(sum(myVariable)==0, sum(eigenXbXbT * myVariable)==1)
myProblem <- Problem(Minimize(obj),myConstr)
ohMyTmp <- solve(myProblem)
sum(myEPWeight^2)
sum(myEPWeight^2 * eigenXbXbT^2)
ohMyTmp$value
obj <- max(sum((myVariable^2) * eigenXbXbT^2)), sum(myVariable^2))
myEPWeight
eigenXbXbT^(-1)-mean(eigenXbXbT^(-1))
myValP1
lambda
eigenXbXbT
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
myValP1
ohMyTmp$value
sum(myEPWeight^2 * eigenXbXbT^2)
sum(myEPWeight^2)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
?standardize
?scale
scamle(X)
scale(X)
colMeans(X)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
Xb <- sqrt(0.9)*rnorm(n*p)
dim(Xb) <- c(n,p)
for(i in 1:n){
Xb[i,] <- Xb[i,] + sqrt(0.1)*rnorm(1)
}
svd(Xb)
svd(Xb)$d
p
svd(Xb)$d^2
mean(svd(Xb)$d^2)
tmp <- matrix(rep(0,p*p),p)
for(i in 1:p) for (j in 1:p)
tmp[i,j] <- 0.9^(abs(i-j))
Xb <- mvrnorm(n,rep(0,p),tmp)
svd(Xb)$d
Xb <- rnorm(n*p)
dim(Xb) <- c(n,p)
svd(Xb)$d
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
?write.csv
paste0("tmp/","haha")
paste0("tmp/","haha",'a')
RepTime <- 100
M <- 1000
alpha <- 0.05
n <- 100
q <- 10
p <- 1000
XGen <- "equalCor"
n <- 100
epsilonDis <- "t"
betabGen <- "dense"
paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv")
source("./code.R")
library(xtable)
set.seed(1)
RepTime <- 10
M <- 1000
alpha <- 0.05
n <- 100
q <- 10
p <- 1000
XGen <- "equalCor"
n <- 100
epsilonDis <- "t"
betabGen <- "dense"
source("./code.R")
library(xtable)
set.seed(1)
RepTime <- 10
M <- 1000
alpha <- 0.05
n <- 100
q <- 10
p <- 1000
XGen <- "equalCor"
n <- 100
epsilonDis <- "t"
betabGen <- "dense"
source("./code.R")
library(xtable)
set.seed(1)
RepTime <- 5000
M <- 1000
alpha <- 0.05
n <- 100
q <- 10
p <- 1000
XGen <- "equalCor"
n <- 100
epsilonDis <- "t"
betabGen <- "dense"
for(XGen in c("iidnormal","equalCor","Toeplitz"))
for(n in c(50,100))
for(epsilonDis in c("t","chi"))
for(betabGen in c("dense","sparse"))
source("./code.R")
source('~/regressionPaper/BayesFactor/formal/code/main2.R', echo=TRUE)
tau
SNR
theD <- read.csv(paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv"))
theD
name(theD)
names(theD)
theD[,1]
theD[,names(theD)[2]]
theD[,names(theD)[1:2]]
install.packages("dplyr")
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData
?read.csv
str(theD)
myData <- as.data.frame(myData)
str(myData)
?as.data.frame
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData <- as.data.frame(myData,stringsAsFactors=FALSE)
str(myData)
myData[,2] <- as.numeric(myData[,2])
str(myData)
myPlot <- ggplot(theD,aes(SNR,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.92))+
#facet_wrap(~z,nrow=2)+
ggsave(paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv"),myPlot)
library(ggplot2)
myPlot <- ggplot(theD,aes(SNR,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.92))
myPlot
myPlot <- ggplot(myData,aes(SNR,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.92))
myPlot
str(myData)
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData <- as.data.frame(myData,stringsAsFactors=FALSE)
names(myData)[2] <- "pvalue"
myData[,2] <- as.numeric(myData[,2])
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.92))
myPlot
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
?boxplot
cawo <- read.csv('50_equalCor_t_dense.csv')
cawo <- read.csv('tmp/50_equalCor_t_dense.csv')
cawo
cawo[cawo$SNR==20,]
cawo2 <- cawo[cawo$SNR==20,]
median(cawo2)
quantile(cawo2[,2])
quantile(cawo2[,3])
quantile(cawo2[,4])
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData
n=50
XGen = "equalCor"
epsilonDis ="t"
betabGen = "dense"
theD <- read.csv(paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv"))
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData <- as.data.frame(myData,stringsAsFactors=FALSE)
names(myData)[2] <- "pvalue"
myData[,2] <- as.numeric(myData[,2])
myData
myData[myData$SNR==20,]
paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv")
tmp<-myData[myData$SNR==20,]
tmp
quantile(tmp[tmp$method=="outEp",])
tmp[tmp$method=="outEp",]
quantile(tmp$pvalue[tmp$method=="outEp"])
cawo <- read.csv('tmp/50_equalCor_t_dense.csv')
cawo2 <- cawo[cawo$SNR==20,]
head(caowo2)
head(cawo2)
quantile(cawo2[,4])
quantile(cawo2[,3])
quantile(cawo2[,2])
quantile(tmp$pvalue[tmp$method=="outGt"])
quantile(tmp$pvalue[tmp$method=="outMy"])
head(myData)
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.92))
myPlot
head(cawo2)
cawo2
colMeans(cawo2)
colMedean(cawo2)
colMed(cawo2)
quantile(cawo2[,2])
quantile(cawo2[,3])
quantile(cawo2[,4])
head(myData)
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.08,0.5))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.0,0.9))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.2,0.85))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.02,0.85))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.05,0.85))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
ylab("haha")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot
names(myData)
names(theD)
?linetype
theD <- read.csv(paste0("tmp/",n,"_",XGen,"_",epsilonDis,"_",betabGen,".csv"))
names(theD) <- c("SNR", "NEW", "GT", "EP")
myData <- NULL
for(i in names(theD)[-1]){
tmp <- theD[,c(names(theD)[1],i)]
tmp$method <- i
myData <- rbind(myData,as.matrix(tmp))
}
myData <- as.data.frame(myData,stringsAsFactors=FALSE)
names(myData)[2] <- "pvalue"
myData[,2] <- as.numeric(myData[,2])
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
geom_hline(yintercept = 0.05,linetype="dashed")+
ylab("Empirical powers")+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot
myData
str(myData)
?as.factor
myData$method <- as.factor(myData$method,levels=c("NEW","GT","EP"))
str(myData)
as.factor(myData$method,levels=c("NEW","GT","EP"))
?as.factor
myData$method <- as.factor(myData$method,levels=c("NEW","GT","EP"),labels=c("NEW","GT","EP"))
myData$method <- factor(myData$method,levels=c("NEW","GT","EP"),labels=c("NEW","GT","EP"))
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
geom_hline(yintercept = 0.05,linetype="dashed")+
ylab("Empirical powers")+
scale_y_continuous(breaks=c(0.05,0.25,0.5,0.75.1))+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
geom_hline(yintercept = 0.05,linetype="dashed")+
ylab("Empirical powers")+
scale_y_continuous(breaks=c(0.05,0.25,0.5,0.75,1))+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot
?color
?plotcolor
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
geom_hline(yintercept = 0.05,linetype="dashed",color="blue")+
ylab("Empirical powers")+
scale_y_continuous(breaks=c(0.05,0.25,0.5,0.75,1))+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot
myPlot <- ggplot(myData,aes(SNR,pvalue,color=method))+
geom_boxplot()+
geom_hline(yintercept = 0.05,linetype="dashed",color="purple")+
ylab("Empirical powers")+
scale_y_continuous(breaks=c(0.05,0.25,0.5,0.75,1))+
guides(colour=guide_legend(title=NULL),linetype=guide_legend(title=NULL))+
theme_bw()+
theme(legend.position=c(0.1,0.85))
myPlot
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main2.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/main2.R', echo=TRUE)
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
?boxplot
library(xtable)
set.seed(1)
RepTime <- 5000
M <- 1000
alpha <- 0.05
plotPointSize <- 100
n <- 100
q <- 10
p <- 1000
XGen <- "equalCor"
n <- 100
epsilonDis <- "t"
betabGen <- "dense"
Xgen=c("Toeplitz")
for(n in c(50,100))
for(epsilonDis in c("t","chi"))
for(betabGen in c("dense","sparse"))
source("./code.R")
n
epsilonDis
betabGen
ls
ls()
pwd()
dir()
XGen
